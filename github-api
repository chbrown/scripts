#!/usr/bin/env python
import os
import sys
import json
import argparse
import requests

root = 'https://api.github.com'


class Printer():
    def __init__(self, destination=sys.stdout):
        self.destination = destination
        interactive = destination.isatty()
        self.encoder = json.JSONEncoder(
            ensure_ascii=False,
            sort_keys=True,
            indent=2 if interactive else None,
            separators=(', ', ': ') if interactive else (',', ':'),
            default=self.default)

    def __call__(self, obj):
        self.destination.write(self.encode(obj).encode('utf8'))
        self.destination.write('\n')

    def encode(self, obj):
        return self.encoder.encode(obj)

    def default(obj):
        if isinstance(obj, requests.models.CaseInsensitiveDict):
            return dict(obj.items())
        return obj

printer = Printer()


def request(url, method='GET', headers=None, **params):
    # only prepend the path with the API root if the path does not already contain the root
    if root not in url:
        url = root + url
    response = requests.request(method, url, headers=headers, params=params)
    result = response.json()
    if isinstance(result, dict):
        printer(result)
    else:
        for entry in result:
            printer(entry)


def get_github_token(token, token_file):
    if token is not None:
        return token

    try:
        token_filepath = os.path.expanduser(token_file)
        return open(token_filepath).readline().strip()
    except:
        print >> sys.stderr, 'Could not find github token; continuing without authentication.'


# def hashes():
#     import glob
#     import hashlib
#     for file_path in glob.glob('data/*'):
#         file_size = os.path.getsize(file_path)
#         with open(file_path) as fp:
#             file_data = fp.read()
#         url = '/repos/{owner}/{repo}/contents/{path}'.format(path=file_path, **repo)
#         params = dict(ref=repo['branch'])
#         response = requests.get(root + url, headers=headers, params=params)
#         result = response.json()
#         print 'Getting file contents... status:', response.status_code

#         shahash = hashlib.sha1('blob %d\0' % file_size)
#         shahash.update(file_data)
#         local_sha = shahash.hexdigest()
#         remote_sha = result.get('sha')
#         print file_path, local_sha, remote_sha

# def listfiles():
#     # import pprint
#     url = '/repos/{owner}/{repo}/contents/{path}'.format(path=datadir, **repo)
#     params = dict(ref=repo['branch'])
#     response = requests.get(root + url, headers=headers, params=params)
#     result = response.json()
#     print 'Getting directory:', datadir
#     print 'Response status code:', response.status_code
#     print inspect(result)


parser = argparse.ArgumentParser(description='Execute Github API requests',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-t', '--token', default=os.environ.get('GITHUB_TOKEN'), help='Token to authorize with')
parser.add_argument('-f', '--token-file', default='~/.github', help='File to use for token credentials')
parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('path', help='API path; e.g., "/user"')
opts = parser.parse_args()

github_token = get_github_token(opts.token, opts.token_file)
headers = dict(Authorization='token %s' % github_token) if github_token else None
request(opts.path, headers=headers)
