#!/usr/bin/env node
var os = require('os');
var stream = require('stream');
var streaming = require('streaming');
var util = require('util');

var ColumnSpacer = module.exports = function(padding, gutter) {
  stream.Transform.call(this, {decodeStrings: false});
  this._rows = []; // an N-long list of lists of strings (the cells)
  this._widths = []; // an N-long list of numbers (column widths)
  this.padding = (padding !== undefined) ? padding : ' ';
  this.gutter = (gutter !== undefined) ? gutter : ' '; // ' | ' is GFM table style; ' ' is minimal style
};
util.inherits(ColumnSpacer, stream.Transform);
ColumnSpacer.prototype._transform = function(chunk, encoding, callback) {
  // capture the row for output later
  var cells = chunk.toString().split(/\t/);
  this._rows.push(cells);
  // adjust the cell widths to fit the cells in this row
  var self = this;
  cells.forEach(function(cell, i) {
    self._widths[i] = Math.max(self._widths[i] || 0, cell.length);
  });
  callback();
};
ColumnSpacer.prototype._flush = function(callback) {
  var self = this;
  this._rows.forEach(function(row, i) {
    var line = row.map(function(cell, i) {
      return self.alignRight(cell, self._widths[i]);
    }).join(self.gutter);
    self.push(line + os.EOL);
  });
  callback();
};
ColumnSpacer.prototype.alignLeft = function(string, width) {
  while (string.length < width) {
    string = this.padding + string;
  }
  return string;
};
ColumnSpacer.prototype.alignRight = function(string, width) {
  while (string.length < width) {
    string = string + this.padding;
  }
  return string;
};

var optimist = require('optimist')
  .usage('Usage: tabs2spaces < accounts.tsv\n\nReplace tabs with padding.')
  .describe({
    help: 'print this help message',
    gutter: 'string to print between each column (use " | " for Markdown)',
    padding: 'string to pad each column',
  })
  .boolean(['help'])
  .alias({help: 'h'})
  .default({
    gutter: ' ',
    padding: ' ',
  });

var argv = optimist.argv;

if (argv.help) {
  optimist.showHelp();
}
else if (process.stdin.isTTY) {
  throw new Error('Tab-separated values must be piped in on STDIN');
}
else {
  var line_splitter = new streaming.Splitter();
  var column_spacer = new ColumnSpacer(argv.padding, argv.gutter);
  process.stdin.pipe(line_splitter).pipe(column_spacer).pipe(process.stdout);
}
