#!/usr/bin/env python
import os
import sys
import argparse
import time
from datetime import datetime

date_pattern = '%Y-%m-%d'
time_pattern = '%H:%M:%S'


def get_now(timezone=None):
    # flags -> datetime objedt
    if timezone in ['UTC', 'GMT']:
        return datetime.utcnow()
    elif timezone is None:
        return datetime.now()
    else:
        raise Exception('Not yet implemented: TZ=%s' % timezone)


def format_datetime(dt, date=False, time=False):
    # datetime + flags -> string
    if date:
        # only write the date
        return dt.strftime(date_pattern)
    elif time:
        # only write time
        return dt.strftime(time_pattern)
    else:
        # write both
        return dt.strftime(date_pattern + 'T' + time_pattern)


def format_now(timezone=None, date=False, time=False, file=False, eol=False, **kw):
    # flags -> datetime string
    now = get_now(timezone)
    string = format_datetime(now, date, time)

    if file:
        string = string.replace(':', '-').replace(' ', '')
    elif eol:
        # if opts.file = False, but opts.eol = True, add the line separator
        string += os.linesep

    return string


def main():
    parser = argparse.ArgumentParser(
        description='Date & time formatting',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    # timezone=None, date=False, time=False, file=False, eol=False
    parser.add_argument('-u', '--utc', action='store_true', help='Shortcut for --timezone UTC')
    parser.add_argument('-z', '--timezone', type=str, help='Timezone')
    parser.add_argument('-d', '--date', action='store_true', help='Date only')
    parser.add_argument('-t', '--time', action='store_true', help='Time only')
    parser.add_argument('-f', '--file', action='store_true', help='Make output filesystem-friendly. '
        'Replaces colons with dashes and removes spaces. Disables --eol.')
    parser.add_argument('-l', '--eol', action='store_true', help='Append newline to output')
    parser.add_argument('-r', '--refresh', action='store_true', help='Refresh every 1 second.')

    parser.add_argument('--demo', action='store_true', help='Demonstrate effects of different flags')
    opts = parser.parse_args()

    if opts.demo:
        flagskeys = ('timezone', 'date', 'time', 'file', 'eol')
        sep = os.environ.get('FS', '|')
        print sep.join(['', 'output'] + list(flagskeys) + [''])
        for timezone in ['UTC', None]:
            flagsets = [
                # timezone, date, time, file, eol
                (timezone, True,  False, False, False),
                (timezone, False, True,  False, False),
                (timezone, False, False, False, False),
                (timezone, False, False, False, True),
                (timezone, False, False, True,  False),
            ]
            for flagset in flagsets:
                flags = dict(zip(flagskeys, flagset))
                string = format_now(**flags)
                escaped = repr(string).replace("'", "`")
                cells = ['', escaped] + list(flagset) + ['']
                print sep.join(map(str, cells))
    else:
        kw = vars(opts)
        if kw['utc']:
            kw['timezone'] = 'UTC'

        if opts.refresh:
            try:
                while True:
                    string = format_now(**kw)
                    sys.stdout.write('\r' + string)
                    sys.stdout.flush()
                    time.sleep(1)
            except KeyboardInterrupt:
                # remove the ^C mark
                sys.stdout.write('\b\b  \n')
                pass
        else:
            string = format_now(**kw)
            sys.stdout.write(string)

if __name__ == '__main__':
    main()
