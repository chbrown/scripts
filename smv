#!/usr/bin/env python
import os
import sys
import shutil
import hashlib
import logging
import psutil

logging.basicConfig(format="%(levelname)-7s %(message)s")
logger = logging.getLogger('smv')


def md5sum(filepath, block_multiplier=1024):
    '''Get the MD5 hexdigest for the given file, using pure python
    md5.block_size = 64 on my Macbook Air
    So when block_multiplier = 1024, md5.block_size*block_multiplier = 65536
    '''
    md5 = hashlib.md5()
    size = md5.block_size * block_multiplier
    with open(filepath, 'rb') as fd:
        while True:
            data = fd.read(size)
            if not data:
                break
            md5.update(data)
    hexdigest = md5.hexdigest()
    logging.info('md5 %s = %s', filepath, hexdigest)
    return hexdigest


def identical_files(source, destination):
    '''Return false if either file is missing or the sizes or the checksums do not match'''
    # 1. check existence
    if os.path.exists(source) and os.path.exists(destination):
        # 2. check size
        if os.path.getsize(source) == os.path.getsize(destination):
            # 3. check hash
            if md5sum(source) == md5sum(destination):
                return True
    return False


def copy(source, destination, force=True):
    if force:
        logger.warning('cp -f %s %s', source, destination)
        shutil.copy(source, destination)
        # double check
        return identical_files(source, destination)
    if identical_files(source, destination):
        logger.warning('%s == %s', source, destination)
        return True
    logger.error('%s != %s', source, destination)
    logger.warning('cp %s %s', source, destination)
    shutil.copy(source, destination)
    # double check
    return identical_files(source, destination)


def get_open_filepaths():
    paths = []
    for proc in psutil.get_process_list():
        try:
            paths += [openfile.path for openfile in proc.get_open_files()]
        except (psutil.AccessDenied, psutil.NoSuchProcess) as exc:
            logger.debug('psutil exception: %s', exc)
    return paths


def main():
    import argparse
    parser = argparse.ArgumentParser(
        description='Like scp but remove the files after copying',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('sources', nargs='+',
                        help='Source files')
    parser.add_argument('destination',
                        help='Destination')
    parser.add_argument('--open', action='store_true',
                        help='Move open files')
    parser.add_argument('--delete', action='store_true',
                        help='Delete files after moving them')
    parser.add_argument('--force', action='store_true',
                        help='Replace existing files on the remote even if they match')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Print extra output (like debug messages)')

    opts = parser.parse_args()

    logger.setLevel(logging.INFO if opts.verbose else logging.WARN)
    logger.debug('opts: %s', vars(opts))

    open_filenames = {os.path.basename(filepath) for filepath in get_open_filepaths()}

    if (len(opts.sources) > 1 or opts.destination.endswith('/')) and not os.path.isdir(opts.destination):
        # if there is more than one source, the destination must be a directory
        os.makedirs(opts.destination)

    counts = dict(deleted=0, copied=0, failed=0)
    for source in opts.sources:
        # source must: 1) exist, 2) not be open, 3) or if it is open, --open must be set
        if os.path.exists(source) and (opts.open or (source not in open_filenames)):
            destination = opts.destination
            # if the destination is a directory, expand out the full copy path here
            if os.path.isdir(opts.destination):
                source_basename = os.path.basename(source)
                destination = os.path.join(opts.destination, source_basename)

            logger.info('%s -> %s', source, destination)
            success = copy(source, destination, force=opts.force)
            if success:
                counts['copied'] += 1
                logger.info('%s == %s', source, destination)
                if opts.delete:
                    logger.warning('rm %s', source)
                    os.remove(source)
                    counts['deleted'] += 1
            else:
                counts['failed'] += 1
                logger.error('%s != %s', source, destination)
                if opts.delete:
                    logger.error('not deleting %s', source)

    logger.info('counts: %s', counts)
    if counts['failed'] > 0:
        sys.exit(1)


if __name__ == '__main__':
    main()
