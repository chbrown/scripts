#!/usr/bin/env bash

set -e # exit on first command that fails

usage() {
  >&2 cat <<HELP
Usage: $(basename "$0") INPUT[/] [INPUT [...]] [-g|--gzip] [-k|--keep] [-p|--prefix] [-h|--help]

Tarball and compress each INPUT into a file named like "INPUT.tar.bz2", then remove INPUT
(using 'trash' if available; otherwise, move it into \$TMPDIR).

Options:
  -g, --gzip    Use gzip instead of bzip2 compression
  -k, --keep    Keep INPUT instead of trashing it
  -p, --prefix  Prefix the created tarball with INPUT's birthtime,
                using the pattern "YYYYMMDD-"
  -h, --help    Show this usage message
HELP
}

INPUTS=()
SUFFIX=bz2
COMPRESSOR=-j
KEEP=false
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    -g|--gzip)
      SUFFIX=gz
      COMPRESSOR=-z
      ;;
    -k|--keep)
      KEEP=true
      ;;
    -p|--prefix)
      PREFIX_PATTERN=%Y%m%d-
      ;;
    *)
      # check that the given filepath exists
      if [[ ! -e $1 ]]; then
        >&2 printf '"%s" does not exist.\n' "$1"
        exit 1
      else
        # add INPUT while removing the trailing slash (hopefully there's only one)
        INPUTS+=("${1%/}")
      fi
      ;;
  esac
  shift
done

compress-dir() {
  # Usage: compress-dir input-directory output-filepath
  #
  # prepare timestamp to apply to output-filepath
  #   touch's -t argument is of the form "[[CC]YY]MMDDhhmm[.SS]"
  TIMESTAMP=$(find "$1" -type f -not -name .DS_Store -print0 | xargs -0 stat -f %SB -t %Y%m%d%H%M.%S | sort | tail -1)
  # prepare temporary file to write to
  TMPFILE=$(mktemp "$2.XXXXXXXXXX")
  # COPYFILE_DISABLE=1 ignores extended attributes (xattr) on Mac OS X
  # -c create a new archive
  # -j compress with bzip2 / -z compress with gzip
  # -f write to specified file
  # -C treats the parent directory as the path context
  # --exclude prevents files matching a pattern from being added
  COPYFILE_DISABLE=1 tar -c $COMPRESSOR -f "$TMPFILE" \
    -C "$(dirname "$1")" \
    --exclude .DS_Store \
    --exclude ._.DS_Store \
    "$1"
  # move into place; if 'link' fails (e.g., due to a 'Cross-device link' error), fall back to 'cp'
  if ! link "$TMPFILE" "$2"; then
    cp "$TMPFILE" "$2"
  fi
  unlink "$TMPFILE"
  # set file mode to defaults (mktemp zeroes out all group/other bits)
  chmod =rw "$2"
  touch -t "$TIMESTAMP" "$2"
  >&2 printf 'created "%s" from contents of "%s"\n' "$2" "$1"
}

format-output() {
  # Usage: format-output input-directory
  PREFIX=
  # add prefix to OUTPUT name if PREFIX_PATTERN is set
  if [[ ! -z ${PREFIX_PATTERN+missing} ]]; then
    # %B selects the birth time of the inode (file)
    # %SB specifies that the birth time should be converted to a string via the -t timefmt argument
    PREFIX=$(stat -f '%SB' -t "$PREFIX_PATTERN" "$1")
  fi
  printf '%s%s.tar.%s' "$PREFIX" "$1" "$SUFFIX"
}

trash-or-move-to-tmpdir() {
  # Usage: trash-or-move-to-tmpdir original-file
  #
  # use the 'trash' command if there is one
  if command -v trash >/dev/null 2>&1; then
    >&2 printf 'trashing %s ...' "$1"
    trash "$1"
  else
    # otherwise, create a new temporary directory and move the original there,
    # where it will (presumably) be flushed upon next system reboot
    temporary_directory=$(mktemp -d)
    >&2 printf 'moving %s to temporary directory (%s) ...' "$1" "$temporary_directory"
    mv "$1" "$temporary_directory"
  fi
  >&2 printf ' done!\n'
}

for INPUT in "${INPUTS[@]}"; do
  OUTPUT=$(format-output "$INPUT")

  # check that the eventual output does not exist
  if [[ -e "$OUTPUT" ]]; then
    >&2 printf '"%s" already exists; not overwriting.\n' "$OUTPUT"
  else
    # run main procedure
    compress-dir "$INPUT" "$OUTPUT"
    # clean up
    if ! $KEEP; then
      trash-or-move-to-tmpdir "$INPUT"
    fi
  fi
done
