#!/usr/bin/env python
import os
import re
from datetime import datetime
import argparse

import logging
logger = logging.getLogger(__name__)


def mkdir_p(dirpath):
    if not os.path.exists(dirpath):
        os.makedirs(dirpath)
    return dirpath


def subdirectories(root):
    for name in os.listdir(root):
        if os.path.isdir(os.path.join(root, name)) and not name.startswith('.'):
            yield name


def walk(root):
    # yield lists of filepaths that are as relative as `root` is.
    # does not yield directories. thus, empty directories will be totally ignored.
    for dirpath, _, filenames in os.walk(root):
        for filename in filenames:
            yield os.path.join(dirpath, filename)


def find_variables(project):
    for filepath in walk(project):
        text = open(filepath).read()
        for variable in re.findall(r'<%(\w+)%>', text):
            yield variable


def interpolate(string, variables):
    def repl(match):
        return variables.get(match.group(1), '')

    return re.sub(r'<%(\w+)%>', repl, string)


def copy_interpolate(source, destination, variables):
    for source_filename in walk(source):
        source_filename_relative = os.path.relpath(source_filename, source)
        target_filename = interpolate(source_filename_relative, variables)
        target_filepath = os.path.join(destination, target_filename)
        target_directory = os.path.dirname(target_filepath)
        # make sure we can write to where target_filepath needs to be
        mkdir_p(target_directory)
        # ignore if it already exists
        if os.path.exists(target_filepath):
            logger.debug('%s exists; not overwriting', target_filepath)
        else:
            source_contents = open(source_filename, 'rb').read()
            target_contents = interpolate(source_contents, variables)
            open(target_filepath, 'wb').write(target_contents)
            logger.info('%s -> %s', source_filename, target_filepath)


def main():
    parser = argparse.ArgumentParser(
        description='Recursive copy with variable interpolation',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--verbose', action='store_true', help='Log extra information')
    # parser.add_argument('-n', '--dry-run', action='store_true',
    #     help='Do not actually create any files')
    parser.add_argument('--source', help='Directory containing package templates',
        default=os.path.expanduser('~/github/templates'))
    opts, _ = parser.parse_known_args()

    logging.basicConfig(level=logging.DEBUG if opts.verbose else logging.INFO)

    # find available templates given options so far
    available_templates = list(subdirectories(opts.source))
    parser.add_argument('template', choices=available_templates, help='Type of project')
    opts, _ = parser.parse_known_args()

    template_path = os.path.join(opts.source, opts.template)
    env = os.environ
    values = {}

    variable_names_in_template = set(find_variables(template_path)) | set(['NAME'])
    for variable_name in variable_names_in_template:
        default = env.get(variable_name)
        kw = dict(help='Template variable')
        if default is not None:
            kw['default'] = default
        else:
            kw['required'] = True
        parser.add_argument('--' + variable_name, **kw)
    opts, _ = parser.parse_known_args()

    # name is always a required variable
    # but the destination default value depends on that the name value
    parser.add_argument('--destination', nargs='?', help='Directory to install at',
        default=os.path.join(os.getcwd(), opts.NAME))
    opts = parser.parse_args()

    values = vars(opts)
    for name, value in values.items():
        logger.debug('%s = %s', name, value)

    copy_interpolate(template_path, opts.destination, values)
    logger.debug('Done')


if __name__ == '__main__':
    main()
