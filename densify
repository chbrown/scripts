#!/usr/bin/env python
import os
import sys
import subprocess

import logging
logger = logging.getLogger('densify')


def width(mechanism='tput'):
    return int(subprocess.check_output(['tput', 'cols']))


cols = width()


def status(line, newline=False):
    sys.stderr.write('\r')
    # fit
    line = line[:cols]
    sys.stderr.write(line)
    # pad
    clear = (cols - len(line))*' '
    sys.stderr.write(clear)
    if newline:
        sys.stderr.write('\n')
    sys.stderr.flush()


def walk(root):
    # flatten into just all the full filepaths
    for dirpath, dirnames, filenames in os.walk(root):
        for filename in filenames:
            yield os.path.join(dirpath, filename)


def stat(filepath):
    status(filepath)

    try:
        size = os.path.getsize(filepath)
    except OSError, err:
        size = 0
        logger.debug('size unavailable', filepath, err)

    return size


def densify(root, min_files, max_density):
    for child in os.listdir(root):
        path = os.path.join(root, child)
        paths = walk(path) if os.path.isdir(path) else [path]
        sizes = map(stat, paths)

        N = len(sizes)
        if N > min_files:
            total = sum(sizes)
            density = total / float(N)
            if density < max_density:
                status('%s %d/%d %0.2f' % (path, total, N, density), True)

    status('DONE', True)


def main():
    import argparse
    parser = argparse.ArgumentParser(description='Densify: tarball large directories of small files',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('paths', nargs='+', default=['.'], help='Paths to densify')
    parser.add_argument('-v', '--verbose', action='store_true', help='Print extra information')
    parser.add_argument('-m', '--min-files', type=int, default=10, help='Minimum files to densify')
    parser.add_argument('-d', '--max-density', type=int, default=100000, help='Minimum directory density to densify')
    opts = parser.parse_args()

    # DEBUG=10, WARN=30, ERROR=40
    logging.basicConfig(format='%(levelname)-8s %(message)s',
        level=logging.DEBUG if opts.verbose else logging.WARN)

    for path in opts.paths:
        densify(path, opts.min_files, opts.max_density)

if __name__ == '__main__':
    main()
