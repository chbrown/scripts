#!/usr/bin/env node
/*jslint node: true */
var fs = require('fs');
var stream = require('stream');
var util = require('util');

var streaming = require('streaming');

var optimist = require('optimist')
  .usage([
    "Usage: jsmap 'return {id: obj[\"id\"]}' < input.json > output.json",
    '',
    'Transform newline-separated JSON objects with JavaScript.',
    '',
    'Runs the code in the first command line argument for each line of input.',
    '* the object parsed from the JSON on stdin will be available as `obj`',
    '* return `undefined` to discard the current input',
    "* all other returned values will be JSON.stringify'd and sent to stdout",
    '',
    "This script uses Node.js'/V8's vm functionality to sandbox the code.",
  ].join('\n'))
  .describe({
    file: 'read javascript from file instead of command line argument',
    init: 'code to run once',
    help: 'print this help message',
    verbose: 'print more output',
  })
  .boolean([
    'help',
    'verbose',
  ])
  .alias({
    file: 'f',
    help: 'h',
    verbose: 'v',
  });

var argv = optimist.argv;

if (argv.help) {
  optimist.showHelp();
}
else if (process.stdin.isTTY) {
  throw new Error('JSON must be piped in on STDIN');
}
else {
  argv = optimist.check(function(argv) {
    if (argv._.length > 0 && argv.file !== undefined) {
      throw new Error('You must not specify both an eval string and a file');
    }
    if (argv._.length > 1) {
      throw new Error('You must not specify more than one eval string');
    }
    if (argv._.length === 0 && argv.file === undefined) {
      throw new Error('You must specify code to evaluate on each input item, via --file / -f, or a command line argument.');
    }
  }).argv;

  process.stdin.on('error', function(err) {
    console.error('STDIN error: %s', err);
  });

  // 1. parser
  var parser = new streaming.json.Parser().on('error', function(err) {
    console.error('Failed to parse JSON input: %s', err.stack);
  });

  // 2. transform
  var code = argv._[0] || fs.readFileSync(argv.file, {encoding: 'utf-8'});
  var vm_stream = new streaming.VM(code, {}).on('error', function(err) {
    console.error('Failed to execute transform code: %s', err);
  });
  if (argv.init) {
    vm_stream.run(argv.init);
  }

  // 3. stringifier
  var stringifier = new streaming.json.Stringifier().on('error', function(err) {
    console.error('Failed to stringify output to JSON: %s', err);
  });

  process.stdin.pipe(parser).pipe(vm_stream).pipe(stringifier).pipe(process.stdout);
}
